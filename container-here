#!/bin/bash

# Configuration file path
CONFIG_DIR="${CONFIG_DIR:-$HOME/.config/container-here}"
CONFIG_FILE="${CONFIG_FILE:-$CONFIG_DIR/config}"

# Function to ensure config directory exists
ensure_config_dir() {
  if [[ ! -d "$CONFIG_DIR" ]]; then
    mkdir -p "$CONFIG_DIR"
  fi
}

# Function to read config value
get_config_value() {
  local key="$1"
  local default_value="$2"

  if [[ -f "$CONFIG_FILE" ]]; then
    local value
    value=$(grep "^$key=" "$CONFIG_FILE" 2>/dev/null | cut -d'=' -f2- | head -n1)
    if [[ -n "$value" ]]; then
      echo "$value"
      return 0
    fi
  fi

  echo "$default_value"
}

# Function to set config value
set_config_value() {
  local key="$1"
  local value="$2"

  ensure_config_dir

  # Remove existing key if present
  if [[ -f "$CONFIG_FILE" ]]; then
    grep -v "^$key=" "$CONFIG_FILE" >"$CONFIG_FILE.tmp" 2>/dev/null || true
    mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
  fi

  # Add new key=value
  echo "$key=$value" >>"$CONFIG_FILE"
}



# Function to list all config values
list_config() {
  if [[ -f "$CONFIG_FILE" ]]; then
    echo "Current configuration:"
    echo ""
    echo "General settings:"
    grep "^default_image=" "$CONFIG_FILE" 2>/dev/null || echo "default_image=alpine (default)"
    echo ""
    echo "Volume mount point: /user-scripts (fixed)"
  else
    echo "No configuration file found. Using defaults."
  fi
}

# Function to show usage information
show_usage() {
  local script_name
  script_name=$(basename "$0")

  echo "Usage: $script_name [OPTIONS] [CONTAINER_NAME]"
  echo ""
  echo "Quick create container with auto mount working dir."
  echo ""
  echo "Arguments:"
  echo "  CONTAINER_NAME    Name for the container (default: current folder name)"
  echo ""
  echo "Options:"
  echo "  --image IMAGE     Docker image to use (default: from config or alpine)"
  echo "  --list            List all container-here containers and their status"
  echo "  --attach NAME     Attach to existing container by name"
  echo "  --config          Show configuration management options"
  echo "  view-scripts      View content of the scripts volume using temporary Alpine container"
  echo "  -h, --help        Show this help message"
  echo ""
  echo "Examples:"
  echo "  $script_name                          # Use current folder name with default image"
  echo "  $script_name my-app                   # Use 'my-app' as name with default image"
  echo "  $script_name --image ubuntu my-app    # Use ubuntu image with 'my-app' as name"
  echo "  $script_name --list                   # List all container-here containers"
  echo "  $script_name --attach my-app          # Attach to existing 'my-app' container"
  echo "  $script_name view-scripts             # View content of scripts volume in temporary container"
}

# Function to show config management help
show_config_help() {
  local script_name
  script_name=$(basename "$0")

  echo "Configuration Management:"
  echo ""
  echo "  $script_name --config set <key> <value>    Set a configuration value"
  echo "  $script_name --config get <key>            Get a configuration value"
  echo "  $script_name --config list                 List all configuration values"
  echo ""
  echo "Available configuration keys:"
  echo "  default_image              Default Docker image to use (default: alpine)"
  echo ""
  echo "Examples:"
  echo "  $script_name --config set default_image ubuntu:22.04"
  echo "  $script_name --config get default_image"
  echo "  $script_name --config list"
}

# Function to handle config commands
handle_config_command() {
  local action="$1"
  shift

  case "$action" in
  set)
    if [[ $# -lt 2 ]]; then
      echo "Error: config set requires key and value"
      echo "Usage: --config set <key> <value>"
      exit 1
    fi
    local key="$1"

    case "$key" in
    default_image)
      if [[ $# -ne 2 ]]; then
        echo "Error: default_image requires exactly one value"
        echo "Usage: --config set default_image <image>"
        exit 1
      fi
      local value="$2"
      set_config_value "$key" "$value"
      echo "Set $key = $value"
      ;;

    *)
      echo "Error: Unknown configuration key '$key'"
      echo "Available keys: default_image, home"
      exit 1
      ;;
    esac
    ;;
  get)
    if [[ $# -lt 1 ]]; then
      echo "Error: config get requires a key"
      echo "Usage: --config get <key>"
      exit 1
    fi
    local key="$1"
    local value

    case "$key" in
    default_image)
      if [[ $# -ne 1 ]]; then
        echo "Error: default_image takes no additional arguments"
        echo "Usage: --config get default_image"
        exit 1
      fi
      value=$(get_config_value "$key" "alpine")
      echo "$value"
      ;;

    *)
      echo "Error: Unknown configuration key '$key'"
      echo "Available keys: default_image, home"
      exit 1
      ;;
    esac
    ;;
  list)
    list_config
    ;;
    *)
      echo "Error: Unknown configuration key '$key'"
      echo "Available keys: default_image"
      exit 1
      ;;
  esac
}

# Function to parse command line arguments
parse_arguments() {
  # Get defaults from config
  DOCKER_IMAGE=$(get_config_value "default_image" "alpine")
  CONTAINER_NAME_ARG=""

  while [[ $# -gt 0 ]]; do
    case $1 in
    --image)
      DOCKER_IMAGE="$2"
      shift 2
      ;;

    --config)
      if [[ $# -eq 1 ]]; then
        show_config_help
        exit 0
      fi
      shift
      handle_config_command "$@"
      exit 0
      ;;
    view-scripts | --view-scripts)
      view_scripts_volume
      exit 0
      ;;
    --list)
      list_containers
      exit 0
      ;;
    --attach)
      if [[ $# -eq 1 ]]; then
        echo "Error: --attach requires a container name"
        echo "Usage: container-here --attach <name>"
        exit 1
      fi
      shift
      attach_to_container "$1"
      exit 0
      ;;
    -h | --help)
      show_usage
      exit 0
      ;;
    -*)
      echo "Error: Unknown option $1"
      show_usage
      exit 1
      ;;
    *)
      if [[ -z "$CONTAINER_NAME_ARG" ]]; then
        CONTAINER_NAME_ARG="$1"
      else
        echo "Error: Multiple container names specified"
        show_usage
        exit 1
      fi
      shift
      ;;
    esac
  done
}

# Function to check if Docker image exists locally
check_image_exists_locally() {
  local image="$1"
  docker image inspect "$image" >/dev/null 2>&1
}

# Function to check if image exists on Docker Hub
check_image_on_dockerhub() {
  local image="$1"
  local repo_name
  local tag="latest"

  # Parse image name and tag
  if [[ "$image" == *":"* ]]; then
    repo_name="${image%:*}"
    tag="${image#*:}"
  else
    repo_name="$image"
  fi

  # Handle official images (no namespace)
  if [[ "$repo_name" != *"/"* ]]; then
    repo_name="library/$repo_name"
  fi

  # Check Docker Hub API
  local url="https://hub.docker.com/v2/repositories/$repo_name/tags/$tag"
  local response
  response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)

  if [[ "$response" == "200" ]]; then
    return 0
  else
    return 1
  fi
}

# Function to get Docker Hub URL for image
get_dockerhub_url() {
  local image="$1"
  local repo_name

  # Parse image name (remove tag)
  if [[ "$image" == *":"* ]]; then
    repo_name="${image%:*}"
  else
    repo_name="$image"
  fi

  # Handle official images
  if [[ "$repo_name" != *"/"* ]]; then
    echo "https://hub.docker.com/_/$repo_name"
  else
    echo "https://hub.docker.com/r/$repo_name"
  fi
}

# Function to validate and prepare Docker image
validate_and_prepare_image() {
  local image="$1"

  echo "Checking Docker image: $image"

  # Check if image exists locally
  if check_image_exists_locally "$image"; then
    echo "✓ Image '$image' found locally"
    return 0
  fi

  echo "Image '$image' not found locally, checking Docker Hub..."

  # Check if image exists on Docker Hub
  if check_image_on_dockerhub "$image"; then
    local hub_url
    hub_url=$(get_dockerhub_url "$image")
    echo "✓ Image '$image' found on Docker Hub"
    echo "Docker Hub URL: $hub_url"
    echo ""

    # Ask user for confirmation
    read -p "Do you want to pull this image? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      echo "Pulling image '$image'..."
      if docker pull "$image"; then
        echo "✓ Image '$image' pulled successfully"
        return 0
      else
        echo "✗ Failed to pull image '$image'"
        return 1
      fi
    else
      echo "Image pull cancelled by user"
      return 1
    fi
  else
    echo "✗ Image '$image' not found on Docker Hub"
    echo "Please check the image name and try again."
    echo "You can search for images at: https://hub.docker.com"
    return 1
  fi
}



# Function to list all container-here containers
list_containers() {
  echo "Container-here containers:"
  echo ""
  
  # Get all container names with prefix
  local container_names
  container_names=$(docker ps -a --format "{{.Names}}" --filter "name=container-here-" 2>/dev/null)
  
  if [ -z "$container_names" ]; then
    echo "No container-here containers found."
    echo "Run 'container-here [name]' to create your first container."
    return 0
  fi
  
  echo "NAME                    STATUS                  MOUNTED DIRECTORY"
  
  # Process each container
  for container_name in $container_names; do
    # Extract base name by removing "container-here-" prefix
    base_name="${container_name#container-here-}"
    
    # Get container status
    status=$(docker ps -a --format "{{.Status}}" --filter "name=^$container_name$" 2>/dev/null)
    
    # Get the mounted directory from container inspect
    mounted_dir=$(docker inspect "$container_name" --format '{{range .Mounts}}{{if eq .Destination "/app"}}{{.Source}}{{end}}{{end}}' 2>/dev/null)
    
    # If we can't get the mount info, show "Unknown"
    if [ -z "$mounted_dir" ]; then
      mounted_dir="Unknown"
    fi
    
    printf "%-22s %-22s %s\n" "$base_name" "$status" "$mounted_dir"
  done
  
  echo ""
  echo "To attach to a container: container-here --attach <name>"
  echo "To create a new container: container-here [name]"
}

# Function to attach to existing container
attach_to_container() {
  local base_name="$1"
  
  if [ -z "$base_name" ]; then
    echo "Error: --attach requires a container name"
    echo "Usage: container-here --attach <name>"
    echo ""
    echo "Available containers:"
    list_containers
    exit 1
  fi
  
  local container_name="container-here-$base_name"
  
  # Check if container exists
  if ! docker ps -a --format "{{.Names}}" | grep -q "^$container_name$"; then
    echo "Error: Container '$base_name' not found."
    echo ""
    echo "Available containers:"
    list_containers
    exit 1
  fi
  
  # Check if container is running
  if docker ps --format "{{.Names}}" | grep -q "^$container_name$"; then
    echo "Attaching to running container '$base_name'..."
    # Detect configured shell or fallback to /bin/bash
    SHELL_CMD=$(docker exec "$container_name" sh -c 'echo $SHELL' 2>/dev/null || echo "/bin/bash")
    if [ -z "$SHELL_CMD" ] || ! docker exec "$container_name" test -x "$SHELL_CMD" 2>/dev/null; then
      SHELL_CMD="/bin/bash"
    fi
    docker exec -it "$container_name" "$SHELL_CMD"
  else
    echo "Starting and attaching to container '$base_name'..."
    docker start -ai "$container_name"
  fi
}

# Function to view scripts volume content
view_scripts_volume() {
  echo "Viewing scripts volume content..."

  # Check if container-here-user-scripts exists
  if ! docker volume ls | grep -q "container-here-user-scripts"; then
    echo "Error: Scripts volume 'container-here-user-scripts' does not exist."
    echo "You need to create a container first to initialize the scripts volume."
    exit 1
  fi

  # Get default image from config, fallback to alpine
  local view_image
  view_image=$(get_config_value "default_image" "alpine")

  # Create unique temporary container name
  local temp_container="container-here-view-$(date +%s)"

  echo "Creating temporary container to view scripts volume..."
  echo "Container name: $temp_container"
  echo "Using image: $view_image"
  echo "Volume: container-here-user-scripts -> /user-scripts"
  echo ""

  # Run temporary container with volume mounted
  docker run -it --rm \
    --name "$temp_container" \
    -v "container-here-user-scripts:/user-scripts" \
    -w "/user-scripts" \
    "$view_image"
}

# Parse command line arguments and set defaults
if [[ "$BATS_TEST_MODE" != "1" ]]; then
  parse_arguments "$@"
else
  # Set defaults for test mode
  DOCKER_IMAGE=$(get_config_value "default_image" "alpine")
  CONTAINER_NAME_ARG=""
fi

# Get base name from argument or use current folder name
BASE_NAME=${CONTAINER_NAME_ARG:-$(basename "$(pwd)")}
CONTAINER_NAME="container-here-$BASE_NAME"

# Exit early if in test mode (after variable definitions)
if [[ "$BATS_TEST_MODE" == "1" ]]; then
  return 0 2>/dev/null || exit 0
fi

# Validate and prepare the Docker image
if ! validate_and_prepare_image "$DOCKER_IMAGE"; then
  echo "Exiting due to image validation failure."
  exit 1
fi

# Check if container already exists
if docker ps -a --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
  # Get container status
  container_status=$(docker ps -a --format "{{.Status}}" --filter "name=^$CONTAINER_NAME$")
  
  echo "Container '$BASE_NAME' already exists."
  echo "Status: $container_status"
  echo ""
  echo "What would you like to do?"
  echo "1) Exit"
  echo "2) Remove old container and create new one"
  echo "3) Use existing container"
  read -p "Choose option (1-3): " choice

  case $choice in
  1)
    echo "Exiting..."
    exit 0
    ;;
  2)
    echo "Removing existing container..."
    docker rm -f "$CONTAINER_NAME"
    ;;
  3)
    echo "Using existing container..."
    if docker ps --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
      echo "Container is already running. Attaching to it..."
      # Detect configured shell or fallback to /bin/bash
      SHELL_CMD=$(docker exec "$CONTAINER_NAME" sh -c 'echo $SHELL' 2>/dev/null || echo "/bin/bash")
      if [ -z "$SHELL_CMD" ] || ! docker exec "$CONTAINER_NAME" test -x "$SHELL_CMD" 2>/dev/null; then
        SHELL_CMD="/bin/bash"
      fi
      docker exec -it "$CONTAINER_NAME" "$SHELL_CMD"
    else
      echo "Starting existing container..."
      docker start -ai "$CONTAINER_NAME"
    fi
    exit 0
    ;;
  *)
    echo "Invalid option. Exiting..."
    exit 1
    ;;
  esac
fi

# Create docker volume if it doesn't exist
if ! docker volume ls | grep -q "container-here-user-scripts"; then
  echo "Creating docker volume: container-here-user-scripts"
  docker volume create container-here-user-scripts
else
  echo "Docker volume container-here-user-scripts already exists"
fi
echo "Using Docker image: $DOCKER_IMAGE"

# Create and run docker container
echo "Creating container: $CONTAINER_NAME"
echo "Mounting volume: container-here-user-scripts -> /user-scripts"
docker run -it \
  --name "$CONTAINER_NAME" \
  -v "$(pwd):/app" \
  -v "container-here-user-scripts:/user-scripts" \
  "$DOCKER_IMAGE"
